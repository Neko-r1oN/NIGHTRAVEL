//----------------------------------------------------
// ゲームマネージャー(GameManager.cs)
// Author : Souma Ueno
//----------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using Unity.VisualScripting;
using UnityEngine;
using UnityEngine.SceneManagement;
using static Grpc.Core.Metadata;
using static UnityEngine.EventSystems.EventTrigger;
using Random = UnityEngine.Random;

public class GameManager : MonoBehaviour
{
    #region 初期設定
    [Header("初期設定")]
    int crushNum; 　　　　　    // 撃破数
    bool bossFlag = false;      // ボスが出たかどうか
    int xp;                     // 経験値
    int requiredXp = 100;       // 必要経験値
    int level;                  // レベル
    int num;                    // 生成までのカウント
    public int spawnInterval;   // 生成間隔
    int spawnCnt;               // スポーン回数
    public int maxSpawnCnt;     // マックススポーン回数
    bool isBossDead;            // ボスが死んだかどうか
    bool isSpawnBoss;           // ボスが生成されたかどうか
    GameObject boss;            // ボス

    #endregion

    #region その他
    [Header("その他")]
    public List<GameObject> enemyList;       // エネミーリスト
    [SerializeField] GameObject bossPrefab;  // ボスプレハブ
    [SerializeField] Transform randRespawnA; // リスポーン範囲A
    [SerializeField] Transform randRespawnB; // リスポーン範囲B
    [SerializeField] Transform minCameraPos; // カメラ範囲の最小値
    [SerializeField] Transform maxCameraPos; // カメラ範囲の最大値
    [SerializeField] float xRadius;          // 生成範囲のx半径
    [SerializeField] float yRadius;          // 生成範囲のy半径
    [SerializeField] float distMinSpawnPos;  // 生成しない範囲

    [SerializeField] GameObject player;      // プレイヤーの情報
    GameObject enemy;                        // エネミーの情報

    float elapsedTime;

    Vector3 bossPos;
    #endregion

    #region 各プロパティ
    [Header("各プロパティ")]
    public GameObject Enemy { get { return enemy; } }

    public bool BossFlag { get { return bossFlag; } set { bossFlag = value; } }

    public GameObject Player { get { return player; } }

    public GameObject Boss {  get { return boss; } }

    public int SpawnInterval { get { return spawnInterval; } set { spawnInterval = value; } }

    public bool IsSpawnBoss { get { return isSpawnBoss; } }

    private static GameManager instance;

    //public bool IsBossDead { get { return bossFlag; } set { isBossDead = value; } } 
    #endregion

    public static GameManager Instance
    {
        get
        {
            return instance;
        }
    }

    private void Awake()
    {
        if (instance == null)
        {
            instance = this;
        }
        else
        {
            // インスタンスが複数存在しないように、既に存在していたら自身を消去する
            Destroy(gameObject);
        }
    }

    /// <summary>
    /// 初期設定
    /// </summary>
    void Start()
    {
        isBossDead = false;
    }

    /// <summary>
    /// 更新処理
    /// </summary>
    void Update()
    {
        if (!isSpawnBoss && bossFlag)
        {
            // ボスの生成範囲の判定
            var spawnPostions = CreateEnemySpawnPosition(minCameraPos.position, maxCameraPos.position);

            Vector3? spawnPos = GenerateEnemySpawnPosition(spawnPostions.minRange, spawnPostions.maxRange);

            if (spawnPos != null)
            {// 返り値がnullじゃないとき
                boss = Instantiate(bossPrefab, (Vector3)spawnPos, Quaternion.identity);
                boss.GetComponent<EnemyBase>().IsBoss = true;

                boss.GetComponent<EnemyBase>().Players.Add(player);
                boss.GetComponent<EnemyBase>().SetNearTarget();
            }

            isSpawnBoss = true;

            bossFlag = false;
        }

        if (isBossDead)
        {// ボスを倒した(仮)
            // 遅れて呼び出し
            Invoke(nameof(ChengScene), 1.5f);
        }

        if (spawnCnt < maxSpawnCnt  && !isBossDead)
        {// スポーン回数が限界に達しているか
            elapsedTime += Time.deltaTime;
            if (elapsedTime > spawnInterval)
            {
                elapsedTime = 0;

                if (spawnCnt < 100)
                {// 敵が100体いない場合
                    for (int i = 0; i < 5; i++)
                    {// 複数体敵を生成
                        // 敵生成処理
                        GenerateEnemy();
                    }
                }
                else
                {// いる場合
                    GenerateEnemy();
                }
            }
        }
    }

    /// <summary>
    /// シーン遷移
    /// </summary>
    private void ChengScene()
    {// シーン遷移
        SceneManager.LoadScene("Result ueno");
    }

    [ContextMenu("CrushEnemy")]
    /// <summary>
    ///  敵撃破
    /// </summary>
    public void CrushEnemy(EnemyBase enemy)
    {
        crushNum++;

        Debug.Log("倒した数：" + crushNum);

        spawnCnt--;

        if (enemy.IsBoss)
        {
            DeathBoss();
        }
        else if (crushNum >= 15)
        {// 撃破数が15以上になったら(仮)

            bossFlag = true;
            Debug.Log("倒した数：" + crushNum + "ボス");
        }
    }

    [ContextMenu("DeathBoss")]
    public void DeathBoss()
    {
        RelicManager.Instance.GenerateRelic(boss.transform.position);

        // ボスフラグを変更
        bossFlag = false;
        // 死んだ判定にする
        isBossDead = true;
    }

    private void OnDrawGizmos()
    {
        if (player != null)
        {
            Gizmos.DrawWireCube(player.transform.position, new Vector3(distMinSpawnPos * 2, yRadius * 2));
            Gizmos.color = Color.yellow;
            Gizmos.DrawWireCube(player.transform.position, new Vector3(xRadius * 2, yRadius * 2));
        }
    }

    /// <summary>
    /// 敵のスポーン可能範囲判定処理
    /// </summary>
    /// <param name="minPoint"></param>
    /// <param name="maxPoint"></param>
    /// <returns></returns>
    private (Vector3 minRange, Vector3 maxRange) CreateEnemySpawnPosition(Vector3 minPoint, Vector3 maxPoint)
    {
        Vector3 minRange = minPoint, maxRange = maxPoint;
        if (minPoint.y < randRespawnA.position.y)
        {
            minRange.y = randRespawnA.position.y;
        }

        if (minPoint.x < randRespawnA.position.x)
        {
            minRange.x = randRespawnA.position.x;
        }

        if (maxPoint.y > randRespawnB.position.y)
        {
            maxRange.y = randRespawnB.position.y;
        }

        if (maxPoint.x > randRespawnB.position.x)
        {
            maxRange.x = randRespawnB.position.x;
        }

        return (minRange, maxRange);
    }

    /// <summary>
    /// 敵生成の位置決定処理
    /// </summary>
    /// <param name="minRange"></param>
    /// <param name="maxRange"></param>
    /// <returns></returns>
    private Vector3? GenerateEnemySpawnPosition(Vector3 minRange, Vector3 maxRange)
    {
        // 試行回数
        int loopMax = 10;

        for (int i = 0; i < loopMax; i++)
        {
            Vector3 spawnPos = new Vector3
                 (Random.Range(minRange.x, maxRange.x), Random.Range(minRange.y, maxRange.y));

            Vector3 distToPlayer =
                player.transform.position - spawnPos;

            if (Mathf.Abs(distToPlayer.x) > distMinSpawnPos
                && Mathf.Abs(distToPlayer.y) > distMinSpawnPos)
            {
                return spawnPos;
            }
        }

        return null;
    }

    /// <summary>
    /// 時間経過毎にスポーン間隔を早める処理
    /// </summary>
    public void DecreaseGeneratInterval()
    {
        spawnInterval -= 1;
    }

    /// <summary>
    /// 敵生成処理
    /// </summary>
    public void GenerateEnemy()
    {
        Vector2 minPlayer =
                    new Vector2(player.transform.position.x - xRadius, player.transform.position.y - yRadius);

        Vector2 maxPlayer =
            new Vector2(player.transform.position.x + xRadius, player.transform.position.y + yRadius);

        // ランダムな位置を生成
        var spawnPostions = CreateEnemySpawnPosition(minPlayer, maxPlayer);

        Vector3? spawnPos = GenerateEnemySpawnPosition(spawnPostions.minRange, spawnPostions.maxRange);

        if (spawnPos != null)
        {
            spawnCnt++;

            int listNum = Random.Range(0, enemyList.Count);

            // 生成
            enemy = Instantiate(enemyList[listNum], (Vector3)spawnPos, Quaternion.identity);

            enemy.GetComponent<EnemyBase>().Players.Add(player);
            enemy.GetComponent<EnemyBase>().SetNearTarget();

            if (enemy.GetComponent<Rigidbody2D>().gravityScale != 0)
            {
                enemy.GetComponent<EnemyBase>().enabled = false;

                // 透明化
                enemy.GetComponent<SpriteRenderer>().enabled = false;
            }
        }
    }
}
